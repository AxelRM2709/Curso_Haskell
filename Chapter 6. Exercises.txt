Chapter 6. Exercises

1.- How does the recursive versi贸n of the factorial function behave if applied to a negatvie argument, 
such as (-1)? Modify the definition to prohibit negative arguments by adding a guard to the recursive case.

fac::Int -> Int
fac n | n==0 =1
      | n>0 = n * fac (n-1)

2.- Define a recursive function sumdown::Int -> Int that returns the sum of the non-negative integer from a given
value down to zero. 

sumdown:: Int -> Int
sumdown 0=0
sumdown n = n + sumdown (n-1)

3.- Define the exponentiation operator ^ for non-negative integers using the same pattern of recursi贸n as the multiplication 
operator *, and show how the expresi贸n 2^3 is evaluated using your definition.

exp' :: Int -> Int -> Int
exp' _ 0 = 1
exp' n m = n * exp' n (m-1)

{-
2^3 = exp' 2 3
exp' 2 3 = 2 * exp' 2 2
         = 2 * (2 * exp' 2 1)
         = 2 * (2 * (2 * exp' 2 0)) 
         = 2 * (2 * (2 * (1)))
         = 8
-}

4.- Define a recursive function euclid::Int -> Int -> Int that implements Euclid's algorithm for calculating the 
greatest common divisor of two non-negativee integers: if the two numbers are equal, this number is the result;
otherwise, the smaller number is subtracted from the larger, and the same process is then repeated.

euclid :: Int -> Int -> Int
euclid x y | x == y = x
           | x<y = euclid x (y-x)
           | x>y = euclid (x-y) y

euclid2::Int -> Int -> Int
euclid2 x y | x==0 =y
            | y==0 =x
            | otherwise = euclid2 y (x `mod` y )

5.- Using the recursive definitions given in this chapter, show how length [1,2,3], drop 3 [1,2,3,4,5], and init [1,2,3] are evaluated.

a)
length [1,2,3]
= 1 + length [2,3]
= 1 + (1 + length [3])
= 1 + (1 + (1 + length []))
= 1 + (1 + (1 + 0))
=3

b) 
drop 3 [1,2,3,4,5]
= drop 2 [2,3,4,5]
= drop 1 [3,4,5]
= drop 0 [4,5]
= [4,5]

c)
init [1,2,3]
= 1: init [2,3]
= 1 : (2 : init [3])
= 1 : (2 : [])
= [1,2]

6.- without looking at the definitions from the standard prelude, define the following library functions on lists using recursi贸n.

a) Decide if all logical values in a list are True: 

and'::[Bool]->Bool
and' []= True
and' (False:xs) = False
and' xss = and' (drop 1 xss)

b) Concatenate a list of list:

concat':: [[a]] -> [a]
concat' [] = []
concat' (x:xs) = x ++ concat' xs -- cada x es una lista

c) Produce a list with n identical elements:

replicate':: Int -> a -> [a]
replicate' 0 a = []
replicate' n a = a : replicate' (n-1) a 

d) Select the nth element of a list:

nth':: [a] -> Int -> a 
nth' xs 0 = xs !! 0
nth' (x:xs) n = nth' xs (n-1)

e) Decide if a value is an element of a list:

elem':: Eq a => a -> [a] -> Bool
elem' x [] = False
elem' x xs = if x==(xs !! 0) then True else elem' x (drop 1 xs)

7.- Define a recursive function merge :: Ord a => [a] -> [a] -> [a] that merges two sorted list to give a single sorted list.

merge'::Ord a => [a] -> [a] -> [a]
merge' xs [] = xs
merge' [] ys = ys
merge' (x:xs) (y:ys) | x<=y = x: merge' xs (y:ys)
                     | x>y  = y: merge' (x:xs) ys

9.- Using the five-step process, construct the library functions that:
a) Calculate the sum of a list of numbers

Step 1: Define the type
sum :: Num a => [a] -> a

Step 2: Enumerate the cases
sum [] =
sum [x] = 
sum (x:xs) =

Step 3: Define the simple cases
sum [] = 0
sum [x] = x
sum (x:xs) =

Step 4: Define the other cases
sum [] = 0
sum [x] = x
sum (x:xs) = x + sum xs

Step 5: Generelise and simplify
sum :: Num a => [a] -> a
sum [] = 0
sum (x:xs) = x + sum xs

b) Take a given number of elements from the start of a list

Step 1: Define the type
take :: Int -> [a] -> a

Step 2: Enumerate the cases
take 0 [] =
take 0 (x:xs) =
take n [] =
take n (x:xs) =

Step 3: Define the simple cases
take 0 [] = []
take 0 (x:xs) = (x:xs)
take n [] = 
take n (x:xs) =

Step 4: Define the other cases
take 0 [] = []
take 0 (x:xs) = (x:xs)
take n [] = []
take n (x:xs) = take (n-1) xs


Step 5: Generelise and simplify
take :: Int -> [a] -> a
take 0 [] = []
take _ [] = []
take n (x:xs) = take (n-1) xs

c) 
Step 1: Define the type

last :: [a] -> a

Step 2: Enumerate the cases

last (x:xs) =

Step 3: Define the simple cases

last (x:xs) | null xs = []
            | otherwise = 

Step 4: Define the other cases

last (x:xs) | null xs = []
            | otherwise = last (drop 1 xs)

Step 5: Generelise and simplify

last :: [a] -> a
last [x] = x
last (x:xs) = last (drop 1 xs) 
 