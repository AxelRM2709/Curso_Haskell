Chapter 5. Exercises

1.- Using a list comprehension, give an expresi√≥n that calculates the sum 1^2+2^2+...+100^2.

sum [x^2 | x <- [1..100] ]

2.- Supose that a coordinate grid of size mxn is give by the list of all pairs (x,y) of integers such that 0 <= x <= m and 0 <= y <= n. Using a list comprehension, define a function grid :: Int -> Int -> [(Int, Int)] that returns a coordinate grid of a given size.

grid:: Int -> Int -> [(Int,Int)]
grid x y = if x>=0 && y>=0 then [(x',y') | x' <-[0..x], y' <-[0..y]] else [(0,0)]

grid x y | x>=0 && y>=0 = [(x',y') | x' <-[0..x], y' <-[0..y]]
         | otherwise = [(0,0)]

3.- Using a list comprehension and the function grid above, define a function square::Int -> [(Int,Int)] that returns a coordinate square of size n, excluding the diagonal from (0,0) to (n,n).

square:: Int -> [(Int, Int)]
square x = [(x',y) | (x',y) <- grid x x, x'/=y]

4.- In similar way to the function length, show how the library function replicate::Int -> a -> [a] that produces a list of identical elements can be defined using a list comprehension.

replicate:: Int -> a -> [a]
replicate n x = [x | _ <-[1..n]]

5.- A triple (x,y,z) of positive integers is Pythagorean if it satisfies the equation x^2+y^2=z^2. Using a list comprehension with three generator, define a function pyths:: Int -> [(Int,Int,Int)] taht returns the list of all such triples whose components are at most a given limit.

pyths:: Int -> [(Int, Int, Int)]
pyths n = [(x,y,z) | x<-[1..n], y<-[1..n], z<-[1..n], x^2+y^2==z^2]

6.- A positive integer is perfect if it equals the sum of all of its factors, excluding the number itself. Using list comprehension and the function factors, define a function perfects:: Int -> [Int] that returns the list of all perfect numbers up to a given limit.

perfects:: Int -> [Int]
perfects n = [x | x<-[1..n], sum (factores x) == 2*x ]

7.- Show how the list comprehension [(x,y) | x <- [1,2], y <- [3,4]] with two generators can be re-expressed using two comprehensions with single generator.

concat [ [(x,3)| x<-[1,2]], [(x,4) | x <-[1,2]] ]

8.- Redifine the function positions using the function find.

positions:: Eq a => a -> [a] -> [Int]
positions x t = find x (zip t [0..length t-1])

9.- The scalar product of two lists integers xs and ys of length n is given by the sum of the products of corresponding integers. In a similar manner to chisqr, show how a list comprehension can be used to define a function scalarproduct::[Int] -> [Int] -> Int that returns the scalar product of two lists.

scalarproduct1:: [Int]->[Int]->Int
scalarproduct1 xs ys =sum [x*y|(x,y) <- zip xs ys]

10.- Modify the Caesar cipher program to also handle upper-case letters.

lti:: Char -> Int --Letter to int
lti c | ( ord c >= 65 && ord c <= 90) = ord c - ord 'A'
      | ( ord c >= 97 && ord c <= 121) = ord c - ord 'a'
      | otherwise = ord c

itl:: Int -> Char   -- Int to lower letter
itl n = chr (ord 'a' + n)

itl':: Int -> Char -- Int to upper letter
itl' n = chr (ord 'A' + n)

shift::Int->Char->Char
shift n c | isLower c = itl ((lti c +n) `mod` 26)
          | isUpper c = itl' ((lti c +n) `mod` 26)
          | otherwise = c
    
encode::Int->String->String
encode n xs = [shift n x | x<- xs]
